---
# tasks file for bootstrap_cluster

# Tasks for bootstrapping the cluster

#Objectives
#Install a single control-plane Kubernetes cluster
#Install a Pod network on the cluster so that your Pods can talk to each other

# Initializing your control-plane node ( MASTER )
# (Recommended) If you have plans to upgrade this single control-plane kubeadm cluster to high 
# availability you should specify the --control-plane-endpoint to set 
# the shared endpoint for all control-plane nodes.
# Such an endpoint can be either a DNS name or an IP address of a load-balancer

# nginx LB IP = 192.168.50.117

################################################
##      Download and configure ETCd           ##
################################################
# We must download the /etcd binaries and place them in the relvent directories 
# and copy some certificates for etcd to use

# Get etcd binaries:
- name: Download etcd version
  get_url:
    url: https://github.com/etcd-io/etcd/releases/download/v3.4.15/etcd-v3.4.15-linux-arm64.tar.gz
    dest: /home/k8sadmin
  when: "'masters' in group_names"
  tags:
    - etcd
  
# Untar the binaries
- name: Untar the binary
  unarchive:
    src: /home/k8sadmin/etcd-v3.4.15-linux-arm64.tar.gz
    dest: /home/k8sadmin
    remote_src: yes
  when: "'masters' in group_names"
  tags:
    - etcd

# Copy the etcd  binaries to /usr/local/bin path
- name: Move etcd-v3.4.15-linux-amd64/etcd* contensts to /usr/local/bin
  copy:
    src: "{{ item.src }}"
    dest: /usr/local/bin
    remote_src: yes
    mode: '0755'
  with_items:
    - { src: /home/k8sadmin/etcd-v3.4.15-linux-arm64/etcd }
    - { src: /home/k8sadmin/etcd-v3.4.15-linux-arm64/etcdctl }
  when: "'masters' in group_names"
  tags:
    - etcd

# Create extra directories for etcd
- name: make /etc/etcd and /var/lib/etcd directories
  file:
    path: "{{ item.path }}"
    state: directory
  with_items:
    - { path: /etc/etcd }
    - { path: /var/lib/etcd }
  when: "'masters' in group_names"
  tags:
    - etcd

# Copy certs
- name: Copy certifactes and keys to /etc/etcd
  copy:
    src: "{{ item.src }}"
    dest: /etc/etcd
    remote_src: yes
  with_items:
    - { src: /home/k8sadmin/ca.pem }
    - { src: /home/k8sadmin/k8s-master.pem }
    - { src: /home/k8sadmin/k8smasterkey.pem }
  when: "'masters' in group_names"
  tags:
    - etcd

# The following steps configure the etcd daemon for systemd to start on startup

# Place a j2 template into /etc/systemd/system/etcd.service using variables
- name: Create systemd etcd service
  template:
    src: etcd.service.j2
    dest: /etc/systemd/system/etcd.service
  when: "'masters' in group_names"
  tags:
    - etcd

# Daemon reload so systemd can use the new service
- name: Daemon reload so systemd can use the new service
  systemd:
    daemon_reload: yes
  when: "'masters' in group_names"
  tags:
    - etcd

# Start and enabled etcd service
- name: Start and enable the etcd service
  service:
    name: etcd
    state: started
    enabled: yes
  when: "'masters' in group_names"
  tags:
    - etcd

################################################
##      Configure control plane               ##
################################################

# Create a join token and hash of the ca and parse out token and hash into their respctive variables
- shell: kubeadm token create --print-join-command
    register: results
  tags:
    - kubeadm_init
    - token

- debug:
    var: results.stdout
  tags:
    - kubeadm_init
    - token

- set_fact:
    token: "{{ results.stdout | regex_search(regexp, '\\2') | first }}"
  vars:
    regexp: '([^\s]+\s){4}([^\s]+)'
  tags:
    - kubeadm_init
    - token

- debug:
    var: token
  tags:
    - kubeadm_init
    - token

- set_fact:
    hash: "{{ results.stdout | regex_search(regexp, '\\2') | first }}"
  vars:
    regexp: '([^\s]+\s){6}([^\s]+)'
  tags:
    - kubeadm_init
    - token

- debug:
    var: hash
  tags:
    - kubeadm_init
    - token

- name: kubeadm init
  shell: kubeadm init --config cluster.kubeconfig --token {{ token.stdout }}
  when: "'masters' in group_names"
  tags:
    - kubeadm_init

- name: Create $HOME/.kube directory
  file:
    path: /home/k8sadmin/.kube
    state: directory
  when: "'masters' in group_names"
  tags:
    - kubeadm_init

- name: Copy admin config to k8sadmin
  copy: 
    src: /etc/kubernetes/admin.conf
    dest: /home/k8sadmin/.kube/config
    owner: k8sadmin
    group: k8sadmin
    remote_src: yes
  when: "'masters' in group_names"
  tags:
    - kubeadm_init

# Apply pod network with Flannel
- name: Apply flannel
  shell: kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml
  when: "'masters' in group_names"
  tags:
    - kubeadm_init

# Join worker nodes
- name: Join worker nodes to cluster
  shell: |
    kubeadm join 192.168.50.117:6443 \
    --token {{ token.stdout }} \
    --discovery-token-ca-cert-hash {{ hash.stdout }}
  tags:
    - kubeadm_init
    
# Join control nodes
#- name: Join other control nodes to cluster
#  shell: |
#    kubeadm join 192.168.50.117:6443 \
#    --token {{ token.stdout }} \
#    --discovery-token-ca-cert-hash sha256:0ea3240343360022ebe06d56dc4d993ff9087c2a2910c7a238c95416596582f7 \
#    --control-plane 

